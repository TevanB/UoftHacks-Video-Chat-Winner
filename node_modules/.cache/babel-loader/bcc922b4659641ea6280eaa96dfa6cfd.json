{"ast":null,"code":"var _jsxFileName = \"/Users/tevb/Documents/uofthacks/proj/Uofthacks2021/src/components/App/App.js\";\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartButton from '../StartButton/StartButton';\nimport api from '../../api';\nimport { useLocation, Switch } from 'react-router-dom';\nimport AppRoute from '../utils/AppRoute';\nimport Home from '../views/Home';\nimport LayoutDefault from '../layouts/LayoutDefault';\nimport './App.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../CallObjectContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\nimport ScrollReveal from '../utils/ScrollReveal';\nimport ReactGA from 'react-ga';\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\n\nconst trackPage = page => {\n  ReactGA.set({\n    page\n  });\n  ReactGA.pageview(page);\n};\n\nconst App = () => {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n  /**\n   * Creates a new call room.\n   */\n\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api.createRoom().then(room => room.url).catch(error => {\n      console.log('Error creating room', error);\n      setRoomUrl(null);\n      setAppState(STATE_IDLE);\n    });\n  }, []);\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n\n  const startJoiningCall = useCallback(url => {\n    const newCallObject = DailyIframe.createCallObject();\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n    newCallObject.join({\n      url\n    });\n  }, []);\n  /**\n   * Starts leaving the current call.\n   */\n\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return; // If we're in the error state, we've already \"left\", so just clean up\n\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n    }\n  }, [callObject, appState]);\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && startJoiningCall(url);\n  }, [startJoiningCall]);\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n\n  useEffect(() => {\n    const pageUrl = pageUrlFromRoomUrl(roomUrl);\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n  /**\n   * Uncomment to attach call object to window for debugging purposes.\n   */\n  // useEffect(() => {\n  //   window.callObject = callObject;\n  // }, [callObject]);\n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n\n  useEffect(() => {\n    if (!callObject) return;\n    const events = ['joined-meeting', 'left-meeting', 'error'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          break;\n\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n          });\n          break;\n\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n\n        default:\n          break;\n      }\n    } // Use initial state\n\n\n    handleNewMeetingState(); // Listen for changes in state\n\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    } // Stop listening for changes in state\n\n\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n  /**\n   * Listen for app messages from other call participants.\n   */\n\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      if (event) {\n        logDailyEvent(event);\n        console.log(`received app message from ${event.fromId}: `, event.data);\n      }\n    }\n\n    callObject.on('app-message', handleAppMessage);\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject]);\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(appState);\n  /**\n   * Only enable the call buttons (camera toggle, leave call, etc.) if we're joined\n   * or if we've errored out.\n   *\n   * !!!\n   * IMPORTANT: calling callObject.destroy() *before* we get the \"joined-meeting\"\n   * can result in unexpected behavior. Disabling the leave call button\n   * until then avoids this scenario.\n   * !!!\n   */\n\n  const enableCallButtons = [STATE_JOINED, STATE_ERROR].includes(appState);\n  /**\n   * Only enable the start button if we're in an idle state (i.e. not creating,\n   * joining, etc.).\n   *\n   * !!!\n   * IMPORTANT: only one call object is meant to be used at a time. Creating a\n   * new call object with DailyIframe.createCallObject() *before* your previous\n   * callObject.destroy() completely finishes can result in unexpected behavior.\n   * Disabling the start button until then avoids that scenario.\n   * !!!\n   */\n\n  const enableStartButton = appState === STATE_IDLE;\n  const childRef = useRef();\n  let location = useLocation();\n  useEffect(() => {\n    const page = location.pathname;\n    document.body.classList.add('is-loaded');\n    childRef.current.init();\n    trackPage(page); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ScrollReveal, {\n    ref: childRef,\n    children: () => /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AppRoute, {\n      exact: true,\n      path: \"/\",\n      render: props => {},\n      component: Home,\n      layout: LayoutDefault,\n      showCall: showCall,\n      createCall: createCall,\n      startJoiningCall: startJoiningCall,\n      enableStartButton: enableStartButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }), showCall ?\n  /*#__PURE__*/\n  // NOTE: for an app this size, it's not obvious that using a Context\n  // is the best choice. But for larger apps with deeply-nested components\n  // that want to access call object state and bind event listeners to the\n  // call object, this can be a helpful pattern.\n  React.createElement(CallObjectContext.Provider, {\n    value: callObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Call, {\n    roomUrl: roomUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tray, {\n    disabled: !enableCallButtons,\n    onClickLeaveCall: startLeavingCall,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/tevb/Documents/uofthacks/proj/Uofthacks2021/src/components/App/App.js"],"names":["React","useRef","useEffect","useState","useCallback","Call","StartButton","api","useLocation","Switch","AppRoute","Home","LayoutDefault","Tray","CallObjectContext","roomUrlFromPageUrl","pageUrlFromRoomUrl","DailyIframe","logDailyEvent","ScrollReveal","ReactGA","STATE_IDLE","STATE_CREATING","STATE_JOINING","STATE_JOINED","STATE_LEAVING","STATE_ERROR","trackPage","page","set","pageview","App","appState","setAppState","roomUrl","setRoomUrl","callObject","setCallObject","createCall","createRoom","then","room","url","catch","error","console","log","startJoiningCall","newCallObject","createCallObject","join","startLeavingCall","destroy","leave","pageUrl","window","location","href","history","replaceState","events","handleNewMeetingState","event","meetingState","on","cleanup","off","handleAppMessage","fromId","data","showCall","includes","enableCallButtons","enableStartButton","childRef","pathname","document","body","classList","add","current","init","props"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport Call from '../Call/Call';\nimport StartButton from '../StartButton/StartButton';\nimport api from '../../api';\nimport { useLocation, Switch } from 'react-router-dom';\nimport AppRoute from '../utils/AppRoute';\nimport Home from '../views/Home';\nimport LayoutDefault from '../layouts/LayoutDefault';\nimport './App.css';\nimport Tray from '../Tray/Tray';\nimport CallObjectContext from '../../CallObjectContext';\nimport { roomUrlFromPageUrl, pageUrlFromRoomUrl } from '../../urlUtils';\nimport DailyIframe from '@daily-co/daily-js';\nimport { logDailyEvent } from '../../logUtils';\nimport ScrollReveal from '../utils/ScrollReveal';\nimport ReactGA from 'react-ga';\n\n\nconst STATE_IDLE = 'STATE_IDLE';\nconst STATE_CREATING = 'STATE_CREATING';\nconst STATE_JOINING = 'STATE_JOINING';\nconst STATE_JOINED = 'STATE_JOINED';\nconst STATE_LEAVING = 'STATE_LEAVING';\nconst STATE_ERROR = 'STATE_ERROR';\nconst trackPage = page => {\n  ReactGA.set({ page });\n  ReactGA.pageview(page);\n};\nconst  App = () => {\n  const [appState, setAppState] = useState(STATE_IDLE);\n  const [roomUrl, setRoomUrl] = useState(null);\n  const [callObject, setCallObject] = useState(null);\n\n  /**\n   * Creates a new call room.\n   */\n  const createCall = useCallback(() => {\n    setAppState(STATE_CREATING);\n    return api\n      .createRoom()\n      .then((room) => room.url)\n      .catch((error) => {\n        console.log('Error creating room', error);\n        setRoomUrl(null);\n        setAppState(STATE_IDLE);\n      });\n  }, []);\n\n  /**\n   * Starts joining an existing call.\n   *\n   * NOTE: In this demo we show how to completely clean up a call with destroy(),\n   * which requires creating a new call object before you can join() again.\n   * This isn't strictly necessary, but is good practice when you know you'll\n   * be done with the call object for a while and you're no longer listening to its\n   * events.\n   */\n  const startJoiningCall = useCallback((url) => {\n    const newCallObject = DailyIframe.createCallObject();\n    setRoomUrl(url);\n    setCallObject(newCallObject);\n    setAppState(STATE_JOINING);\n    newCallObject.join({ url });\n  }, []);\n\n  /**\n   * Starts leaving the current call.\n   */\n  const startLeavingCall = useCallback(() => {\n    if (!callObject) return;\n    // If we're in the error state, we've already \"left\", so just clean up\n    if (appState === STATE_ERROR) {\n      callObject.destroy().then(() => {\n        setRoomUrl(null);\n        setCallObject(null);\n        setAppState(STATE_IDLE);\n      });\n    } else {\n      setAppState(STATE_LEAVING);\n      callObject.leave();\n    }\n  }, [callObject, appState]);\n\n  /**\n   * If a room's already specified in the page's URL when the component mounts,\n   * join the room.\n   */\n  useEffect(() => {\n    const url = roomUrlFromPageUrl();\n    url && startJoiningCall(url);\n  }, [startJoiningCall]);\n\n  /**\n   * Update the page's URL to reflect the active call when roomUrl changes.\n   *\n   * This demo uses replaceState rather than pushState in order to avoid a bit\n   * of state-management complexity. See the comments around enableCallButtons\n   * and enableStartButton for more information.\n   */\n  useEffect(() => {\n    const pageUrl = pageUrlFromRoomUrl(roomUrl);\n    if (pageUrl === window.location.href) return;\n    window.history.replaceState(null, null, pageUrl);\n  }, [roomUrl]);\n\n  /**\n   * Uncomment to attach call object to window for debugging purposes.\n   */\n  // useEffect(() => {\n  //   window.callObject = callObject;\n  // }, [callObject]);\n\n  /**\n   * Update app state based on reported meeting state changes.\n   *\n   * NOTE: Here we're showing how to completely clean up a call with destroy().\n   * This isn't strictly necessary between join()s, but is good practice when\n   * you know you'll be done with the call object for a while and you're no\n   * longer listening to its events.\n   */\n  useEffect(() => {\n    if (!callObject) return;\n\n    const events = ['joined-meeting', 'left-meeting', 'error'];\n\n    function handleNewMeetingState(event) {\n      event && logDailyEvent(event);\n      switch (callObject.meetingState()) {\n        case 'joined-meeting':\n          setAppState(STATE_JOINED);\n          break;\n        case 'left-meeting':\n          callObject.destroy().then(() => {\n            setRoomUrl(null);\n            setCallObject(null);\n            setAppState(STATE_IDLE);\n          });\n          break;\n        case 'error':\n          setAppState(STATE_ERROR);\n          break;\n        default:\n          break;\n      }\n    }\n\n    // Use initial state\n    handleNewMeetingState();\n\n    // Listen for changes in state\n    for (const event of events) {\n      callObject.on(event, handleNewMeetingState);\n    }\n\n    // Stop listening for changes in state\n    return function cleanup() {\n      for (const event of events) {\n        callObject.off(event, handleNewMeetingState);\n      }\n    };\n  }, [callObject]);\n\n  /**\n   * Listen for app messages from other call participants.\n   */\n  useEffect(() => {\n    if (!callObject) {\n      return;\n    }\n\n    function handleAppMessage(event) {\n      if (event) {\n        logDailyEvent(event);\n        console.log(`received app message from ${event.fromId}: `, event.data);\n      }\n    }\n\n    callObject.on('app-message', handleAppMessage);\n\n    return function cleanup() {\n      callObject.off('app-message', handleAppMessage);\n    };\n  }, [callObject]);\n\n \n\n  /**\n   * Show the call UI if we're either joining, already joined, or are showing\n   * an error.\n   */\n  const showCall = [STATE_JOINING, STATE_JOINED, STATE_ERROR].includes(\n    appState\n  );\n\n  /**\n   * Only enable the call buttons (camera toggle, leave call, etc.) if we're joined\n   * or if we've errored out.\n   *\n   * !!!\n   * IMPORTANT: calling callObject.destroy() *before* we get the \"joined-meeting\"\n   * can result in unexpected behavior. Disabling the leave call button\n   * until then avoids this scenario.\n   * !!!\n   */\n  const enableCallButtons = [STATE_JOINED, STATE_ERROR].includes(appState);\n\n  /**\n   * Only enable the start button if we're in an idle state (i.e. not creating,\n   * joining, etc.).\n   *\n   * !!!\n   * IMPORTANT: only one call object is meant to be used at a time. Creating a\n   * new call object with DailyIframe.createCallObject() *before* your previous\n   * callObject.destroy() completely finishes can result in unexpected behavior.\n   * Disabling the start button until then avoids that scenario.\n   * !!!\n   */\n  const enableStartButton = appState === STATE_IDLE;\n\n  const childRef = useRef();\n  let location = useLocation();\n  useEffect(() => {\n    const page = location.pathname;\n    document.body.classList.add('is-loaded')\n    childRef.current.init();\n    trackPage(page);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location]);\n  return (\n    <div className=\"app\">\n      <ScrollReveal\n      ref={childRef}\n      children={() => (\n        <Switch>\n          <AppRoute exact path=\"/\" \n          render={(props)=>{\n            \n          }}\n          component={Home} \n          layout={LayoutDefault} \n          showCall={showCall} createCall={createCall} startJoiningCall={startJoiningCall} enableStartButton={enableStartButton}/>\n        </Switch>\n      )} />\n\n      {showCall ? (\n        // NOTE: for an app this size, it's not obvious that using a Context\n        // is the best choice. But for larger apps with deeply-nested components\n        // that want to access call object state and bind event listeners to the\n        // call object, this can be a helpful pattern.\n        <CallObjectContext.Provider value={callObject}>\n          <Call roomUrl={roomUrl} />\n          <Tray\n            disabled={!enableCallButtons}\n            onClickLeaveCall={startLeavingCall}\n          />\n        </CallObjectContext.Provider>\n      ):(\n        <div></div>\n      )\n    }\n    </div>\n  );\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}